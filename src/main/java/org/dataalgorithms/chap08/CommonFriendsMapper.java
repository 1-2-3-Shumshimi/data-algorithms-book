package org.dataalgorithms.chap08;

import java.io.IOException;
import org.apache.log4j.Logger;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.mapreduce.Mapper.Context;
import org.apache.commons.lang.StringUtils;

/**
 * The CommonFriendsMapper class implements the map() function.
 *
 * map(key, value) {
 *	// key is the key generated by MapReduce/Hadoop
 *	// value is one line of input
 *	Let (<person> (<friend_1> <friend_2> ... <friend_N>)) = parse(line);
 *	reducerValue =  (<friend_1> <friend_2> ... <friend_N>);
 *	foreach friend in (<friend_1> <friend_2> ... <friend_N>)  {
 *		reducerKey = buildSortedKey(person, friend);
 *		emit(reducerKey, reducerValue);
 * 	}
 * }
 * 
 * @author Mahmoud Parsian 
 */
public class CommonFriendsMapper
	extends Mapper<LongWritable, Text, Text, Text> {
	
	private static Text reducerKey = new Text();
	private static Text reducerValue = new Text();

	static String getFriends(String[] tokens) {
		if (tokens.length == 2) {
			return "";
		}
		StringBuilder builder = new StringBuilder();
		for (int i=1; i < tokens.length; i++) {
			builder.append(tokens[i]);
			if (i < (tokens.length -1)) {
				builder.append(",");
			}
		}
		return builder.toString();
	}
	
	static String buildSortedKey(String person, String friend) {
		long p = Long.parseLong(person);
		long f = Long.parseLong(friend);
		if (p < f) {
			return person + "," + friend;
		}
		else {
			return friend + "," + person;
		}
	}
			
	
	public void map(LongWritable key, Text value, Context context)
		throws IOException, InterruptedException {
		// parse input, delimiter is a single space
	  	String[] tokens = StringUtils.split(value.toString(), " ");

		// create reducer value
	  	String friends = getFriends(tokens);
	  	reducerValue.set(friends);
	  	
		String person = tokens[0];
		for (int i=1; i < tokens.length; i++) {
			String friend = tokens[i];
			String reducerKeyAsString = buildSortedKey(person, friend);
			reducerKey.set(reducerKeyAsString);
			context.write(reducerKey, reducerValue);
		}
	}
	
}
